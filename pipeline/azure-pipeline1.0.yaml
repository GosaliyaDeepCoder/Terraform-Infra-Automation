trigger:
- master

variables:
 - name: 'serviceconnection'
   value: 'AzureDevopsFederatedSP-1.0'

 - name: 'environment'
   value: 'dev'

 - name: 'backend_rg'
   value: 'rg-terraform-backend'

 - name: 'backend_storageaccount'
   value: 'tfstatestorage1261'

 - name: 'backend_container'
   value: 'terraform-state'

 - name: 'working_directory'
   value: '$(System.DefaultWorkingDirectory)'

pool:
  vmImage: ubuntu-latest

stages:
  # Stage 1: Checkov Scan
  - stage: "runCheckov"
    displayName: "Checkov: Static Code Analysis"
    jobs:
      - job: "runCheckov"
        displayName: "Checkov > Pull, run and publish results of Checkov scan"
        steps:
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: 'pip install checkov'
            displayName: Install checkov
        - task: Bash@3
          inputs:
            targetType: 'inline'
            workingDirectory: $(working_directory)
            script: 'checkov -d . -o junitxml > scan-result.xml --soft-fail'
            displayName: Checkov source code scan
            continueOnError: true
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            searchFolder: '$(working_directory)'
            testResultsFiles: '**/*scan-result.xml'
            mergeTestResults: false
            testRunTitle: Terraform source code scan
            failTaskOnFailedTests: false
            publishRunAttachments: true
          displayName: Publish Test Result
        - task: AzureKeyVault@2
          displayName: 'Fetch Secrets from Azure Key Vault'
          inputs:
            azureSubscription: '$(serviceconnection)'
            KeyVaultName: 'tf-keyvault31029'
            SecretsFilter: '*'
            RunAsPreJob: false

  # Stage 2: Terraform Validate
  - stage: validate
    displayName: 'Terraform Validate'
    jobs:
    - job: validate
      continueOnError: false
      steps:
      - task: TerraformInstaller@1
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: 'latest'
      - task: TerraformTaskV4@4
        displayName: 'Terraform Init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: $(serviceconnection)
          backendAzureRmResourceGroupName: '$(backend_rg)'
          backendAzureRmStorageAccountName: '$(backend_storageaccount)'
          backendAzureRmContainerName: $(backend_container)
          backendAzureRmKey: '$(SA-KEY)'
          workingDirectory: '$(working_directory)'
      - task: TerraformTaskV4@4
        displayName: 'Terraform Validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'

  # Stage 3: Plan and Apply
  - stage: Plan_Apply_dev
    dependsOn: [validate]
    condition: succeeded('validate')
    displayName: Plan_Apply_dev
    jobs:
      # Job 1: Plan
      - job: plan
        displayName: 'Terraform Plan Dev'
        continueOnError: false
        steps:
        - task: TerraformInstaller@1
          displayName: 'Install Terraform'
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: $(serviceconnection)
            backendAzureRmResourceGroupName: '$(backend_rg)'
            backendAzureRmStorageAccountName: '$(backend_storageaccount)'
            backendAzureRmContainerName: $(backend_container)
            backendAzureRmKey: '$(SA-KEY)'
            workingDirectory: '$(working_directory)'
        - task: TerraformTaskV4@4
          displayName: Terraform Plan
          inputs:
            provider: 'azurerm'
            command: 'plan'
            commandOptions: '-out=$(Build.SourcesDirectory)/tfplanfile'
            environmentServiceNameAzureRM: $(serviceconnection)
            workingDirectory: '$(working_directory)'
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: 'pip install checkov'
            displayName: Install Checkov
        - task: Bash@3
          inputs:
            targetType: 'inline'
            workingDirectory: '$(working_directory)'
            script: |
              terraform show -json $(Build.SourcesDirectory)/tfplanfile > main.json
              checkov --skip-check "CKV_AZURE_101,CKV_AZURE_140,CKV_AZURE_100" -f main.json -o junitxml > Checkov-Plan-Report.xml --soft-fail
          displayName: Checkov Plan Scan
          continueOnError: true
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            searchFolder: '$(working_directory)'
            testResultsFiles: '**/*Checkov-Plan-Report.xml'
            mergeTestResults: false
            testRunTitle: Checkov $(environment) workspace plan scan
            failTaskOnFailedTests: false
            publishRunAttachments: true
          displayName: Publish Test Result

      # Job 2: Manual Validation (server-based job)
      - job: waitForValidation
        displayName: Wait for Execution Plan Validation
        pool: server
        timeoutInMinutes: 4320 # Job times out in 3 days
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 1440 # Task times out in 1 day
          inputs:
            notifyUsers: |
              deepazcloud@outlook.com
            instructions: 'Please validate the build configuration and resume'
            onTimeout: 'reject'

      # Job 3: Apply
      - job: Terraform_apply_dev
        dependsOn: [plan, waitForValidation]
        condition: |
          and
           (
             eq(dependencies.plan.result, 'Succeeded'),
             eq(dependencies.waitForValidation.result, 'Succeeded')
           )
        displayName: 'Terraform Apply Dev'
        timeoutInMinutes: 0
        steps:
        - checkout: self
        - task: TerraformInstaller@1
          displayName: 'Install Terraform'
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: $(serviceconnection)
            backendAzureRmResourceGroupName: '$(backend_rg)'
            backendAzureRmStorageAccountName: '$(backend_storageaccount)'
            backendAzureRmContainerName: $(backend_container)
            backendAzureRmKey: $(SA-KEY)
            workingDirectory: '$(working_directory)'
        - task: TerraformTaskV4@4
          displayName: Terraform Apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            commandOptions: '-input=false -auto-approve'
            environmentServiceNameAzureRM: $(serviceconnection)
            workingDirectory: '$(working_directory)'
